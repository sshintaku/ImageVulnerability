package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"regexp"

	CloudType "github.com/sshintaku/cloud_types"
	"github.com/sshintaku/prismacloud"
)

func main() {

	session := prismacloud.Session{}
	session.CreateSession()
	imageInfoArray := session.GetImageCVEInfo("CVE-2022-22963")
	imageData := session.GetDeployedImages()
	fmt.Println("Image,Container,Host,Tas Org Name, Tas Application Name")
	for _, item := range imageInfoArray {
		item.GetImageTags(imageData)
		report := item.Image + "," + item.Container + "," + item.Host + "," + item.TasOrgName + "," + item.TasApplicationName
		fmt.Println(report)
	}
	/* session := prismacloud.Session{}
	session.CreateSession()
	imageData := session.GetDeployedImages()
	fmt.Println(imageData) */

}

func (i *ImageInfo) GetImageTags(imageData *[]CloudType.ComplianceObject) {
	for _, data := range *imageData {
		flag := false
		if i.Image == data.RepoTags.Repo {
			for _, label := range data.Labels {
				match, _ := regexp.MatchString("^tas-org-name", label)
				if match {
					i.TasOrgName = label
					flag = true
				}
				match2, _ := regexp.MatchString("^tas-application-name", label)
				if match2 {
					i.TasApplicationName = label
					flag = true
				}

			}

		}
		if flag {
			return
		}
	}
}

type ImageOutput struct {
	RiskTree map[string]interface{} `json:"riskTree"`
}

type ImageInfo struct {
	Image              string
	Host               string
	Container          string
	TasOrgName         string
	TasApplicationName string
}

func GetImageInfo() []ImageInfo {
	file, fileReadError := os.ReadFile("cve22963.json")
	if fileReadError != nil {
		log.Fatal(fileReadError)
	}
	var list []ImageInfo
	var jsonObject ImageOutput
	json.Unmarshal(file, &jsonObject)
	for _, value := range jsonObject.RiskTree {
		output := value.([]interface{})

		for _, subValue := range output {
			var imageInfo ImageInfo
			output2 := subValue.(map[string]interface{})
			for key, subsubValue := range output2 {
				output3 := fmt.Sprintf("%v", subsubValue)
				if key == "host" {
					imageInfo.Host = output3
				}
				if key == "image" {
					imageInfo.Image = output3
				}
				if key == "container" {
					imageInfo.Container = output3
				}
			}
			list = append(list, imageInfo)
		}

	}
	return list
}
